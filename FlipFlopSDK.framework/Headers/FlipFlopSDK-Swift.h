// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef FLIPFLOPSDK_SWIFT_H
#define FLIPFLOPSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import AVKit;
@import CoreGraphics;
@import CoreMedia;
@import Foundation;
@import GLKit;
@import MetalKit;
@import ObjectiveC;
@import SocketRocket;
@import UIKit;
@import WebRTC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FlipFlopSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// This class communicate with flipflop server using http restful api.
SWIFT_CLASS("_TtC11FlipFlopSDK9APIClient")
@interface APIClient : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSString;

/// The ASUndefined class represents an undefined for ActionScript.
SWIFT_CLASS("_TtC11FlipFlopSDK11ASUndefined")
@interface ASUndefined : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// ActionScript 3.0 introduces a new XML type.
/// seealso:
/// 3.13 XML type (amf-file-format-spec.pdf)
SWIFT_CLASS("_TtC11FlipFlopSDK5ASXML")
@interface ASXML : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// ActionScript 1.0 and 2.0 and flash.xml.XMLDocument in ActionScript 3.0
/// seealso:
///
/// <ul>
///   <li>
///     2.17 XML Document Type (amf0-file-format-specification.pdf)
///   </li>
///   <li>
///     3.9 XMLDocument type (amf-file-format-spec.pdf)
///   </li>
/// </ul>
SWIFT_CLASS("_TtC11FlipFlopSDK13ASXMLDocument")
@interface ASXMLDocument : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





@class NSNotification;

SWIFT_CLASS("_TtC11FlipFlopSDK14AVOutputPlayer")
@interface AVOutputPlayer : NSObject
- (void)playerDidFinishPlaying:(NSNotification * _Nonnull)notification;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVPlayerItemOutput;

@interface AVOutputPlayer (SWIFT_EXTENSION(FlipFlopSDK)) <AVPlayerItemOutputPullDelegate>
- (void)outputMediaDataWillChange:(AVPlayerItemOutput * _Nonnull)sender;
@end


SWIFT_CLASS("_TtC11FlipFlopSDK10AVRecorder")
@interface AVRecorder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC11FlipFlopSDK11AudioEffect")
@interface AudioEffect : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11FlipFlopSDK11IOComponent")
@interface IOComponent : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11FlipFlopSDK16AudioIOComponent")
@interface AudioIOComponent : IOComponent
@end



@class AVCaptureOutput;
@class AVCaptureConnection;

@interface AudioIOComponent (SWIFT_EXTENSION(FlipFlopSDK)) <AVCaptureAudioDataOutputSampleBufferDelegate>
- (void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
@end




SWIFT_CLASS("_TtC11FlipFlopSDK14AudioResampler")
@interface AudioResampler : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11FlipFlopSDK11VideoEffect")
@interface VideoEffect : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11FlipFlopSDK9BlendMask")
@interface BlendMask : VideoEffect
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, CameraPreset, closed) {
  CameraPresetHd1920x1080 = 0,
  CameraPresetHd1280x720 = 1,
  CameraPresetVga640x480 = 2,
  CameraPresetCif352x288 = 3,
};


SWIFT_CLASS("_TtC11FlipFlopSDK18ColorOverlayFilter")
@interface ColorOverlayFilter : VideoEffect
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11FlipFlopSDK25DefaultAVRecorderDelegate")
@interface DefaultAVRecorderDelegate : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVAssetWriterInput;
@class AVAssetWriterInputPixelBufferAdaptor;
@class AVAssetWriter;

@interface DefaultAVRecorderDelegate (SWIFT_EXTENSION(FlipFlopSDK))
- (void)rotateFile:(AVRecorder * _Nonnull)recorder withPresentationTimeStamp:(CMTime)withPresentationTimeStamp mediaType:(AVMediaType _Nonnull)mediaType;
- (AVAssetWriterInputPixelBufferAdaptor * _Nullable)getPixelBufferAdaptor:(AVRecorder * _Nonnull)recorder withWriterInput:(AVAssetWriterInput * _Nullable)withWriterInput SWIFT_WARN_UNUSED_RESULT;
- (AVAssetWriterInput * _Nullable)getWriterInput:(AVRecorder * _Nonnull)recorder mediaType:(AVMediaType _Nonnull)mediaType sourceFormatHint:(CMFormatDescriptionRef _Nullable)sourceFormatHint SWIFT_WARN_UNUSED_RESULT;
- (void)didFinishWriting:(AVRecorder * _Nonnull)recorder;
- (void)didStartRunning:(AVRecorder * _Nonnull)recorder;
- (void)didStopRunning:(AVRecorder * _Nonnull)recorder;
- (AVAssetWriter * _Nullable)createWriter:(NSString * _Nullable)fileName SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11FlipFlopSDK18DisplayLinkedQueue")
@interface DisplayLinkedQueue : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@protocol FFConferenceDelegate;
@class UIView;

SWIFT_CLASS("_TtC11FlipFlopSDK12FFConference")
@interface FFConference : NSObject
@property (nonatomic, weak) id <FFConferenceDelegate> _Nullable delegate;
- (void)prepareWithPreview:(UIView * _Nonnull)preview;
- (void)join;
- (void)leave;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL("_TtP11FlipFlopSDK20FFConferenceDelegate_")
@protocol FFConferenceDelegate
- (UIView * _Nullable)onJoinedWithConference:(FFConference * _Nonnull)conference room:(NSString * _Nonnull)room userID:(NSString * _Nonnull)userID SWIFT_WARN_UNUSED_RESULT;
- (void)onLeavedWithConference:(FFConference * _Nonnull)conference room:(NSString * _Nonnull)room userID:(NSString * _Nonnull)userID;
@end

@class FFVideoInfo;
@class FFStreamEvent;
@class NSNumber;

SWIFT_CLASS("_TtC11FlipFlopSDK9FFMyLives")
@interface FFMyLives : NSObject
@property (nonatomic, readonly, strong) FFVideoInfo * _Nullable video;
@property (nonatomic, readonly, strong) FFStreamEvent * _Nullable stream_event;
@property (nonatomic, readonly) NSInteger available_live_count;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface FFMyLives (SWIFT_EXTENSION(FlipFlopSDK))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@protocol FFPlayerDelegate;

SWIFT_CLASS("_TtC11FlipFlopSDK8FFPlayer")
@interface FFPlayer : NSObject
@property (nonatomic, weak) id <FFPlayerDelegate> _Nullable delegate;
@property (nonatomic, readonly) double duration;
@property (nonatomic) BOOL isMuted;
- (void)prepareWithView:(UIView * _Nonnull)view;
- (void)start;
- (void)pause;
- (void)resume;
- (void)stop;
- (void)seekToSec:(double)sec exactly:(BOOL)exactly completion:(void (^ _Nullable)(double))completion;
- (void)startPIP;
- (void)stopPIP;
- (void)reset;
- (void)sendMessageWithText:(NSString * _Nonnull)text data:(NSString * _Nullable)data customType:(NSString * _Nullable)customType;
- (void)sendWhispherWithReceiver:(NSString * _Nonnull)receiver text:(NSString * _Nonnull)text data:(NSString * _Nullable)data customType:(NSString * _Nullable)customType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@class FFError;
@class FFMessage;
@class FFStat;

SWIFT_PROTOCOL("_TtP11FlipFlopSDK16FFPlayerDelegate_")
@protocol FFPlayerDelegate
- (void)onPreparedWithPlayer:(FFPlayer * _Nonnull)player;
- (void)onStartedWithPlayer:(FFPlayer * _Nonnull)player;
- (void)onPausedWithPlayer:(FFPlayer * _Nonnull)player;
- (void)onStoppedWithPlayer:(FFPlayer * _Nonnull)player;
- (void)onCompletedWithPlayer:(FFPlayer * _Nonnull)player;
- (void)onProgressUpdatedWithPlayer:(FFPlayer * _Nonnull)player sec:(double)sec;
- (void)onErrorWithPlayer:(FFPlayer * _Nonnull)player error:(FFError * _Nonnull)error;
- (void)onChatMessgeReceivedWithPlayer:(FFPlayer * _Nonnull)player message:(FFMessage * _Nonnull)message;
- (void)onChatStatReceivedWithPlayer:(FFPlayer * _Nonnull)player stat:(FFStat * _Nonnull)stat;
- (void)onBackgroundWithPlayer:(FFPlayer * _Nonnull)player;
- (void)onForegroundWithPlayer:(FFPlayer * _Nonnull)player;
@end


SWIFT_CLASS("_TtC11FlipFlopSDK13FFStreamEvent")
@interface FFStreamEvent : NSObject
@property (nonatomic, readonly) int64_t id;
@property (nonatomic, readonly, copy) NSString * _Nonnull video_key;
@property (nonatomic, readonly, copy) NSString * _Nonnull stream_key;
@property (nonatomic, readonly, copy) NSString * _Nonnull state;
@property (nonatomic, readonly) uint64_t created_at;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum StreamingProtocol : NSInteger;
@class FFStreamerImplConfig;
@class UIImage;
@class AVAsset;

SWIFT_CLASS("_TtC11FlipFlopSDK14FFStreamerImpl")
@interface FFStreamerImpl : NSObject
@property (nonatomic) CGFloat zoom;
@property (nonatomic) BOOL videoMirror;
@property (nonatomic) BOOL mute;
@property (nonatomic) BOOL continuousAutofocus;
@property (nonatomic) BOOL continuousExposure;
@property (nonatomic) float exposureTargetBias;
@property (nonatomic, readonly) float minExposureTargetBias;
@property (nonatomic, readonly) float maxExposureTargetBias;
@property (nonatomic, readonly) NSInteger currentBitrate;
@property (nonatomic) NSInteger videoBitrateOnFly;
@property (nonatomic) BOOL adaptiveBitrate;
- (nonnull instancetype)initWithStreamingProtocol:(enum StreamingProtocol)streamingProtocol OBJC_DESIGNATED_INITIALIZER;
- (void)willResignActiveNotification:(NSNotification * _Nonnull)notification;
- (void)handleRouteChange:(NSNotification * _Nonnull)notification;
- (void)didBecomeActiveNotification:(NSNotification * _Nonnull)notification;
- (void)prepareWithPreview:(UIView * _Nonnull)preview config:(FFStreamerImplConfig * _Nonnull)config;
- (void)startWithAccessToken:(NSString * _Nonnull)accessToken userID:(NSString * _Nonnull)userID userName:(NSString * _Nonnull)userName avatarProfileURL:(NSString * _Nonnull)avatarProfileURL streamkey:(NSString * _Nonnull)streamkey livekey:(NSString * _Nonnull)livekey;
- (UIImage * _Nullable)cameraCapture SWIFT_WARN_UNUSED_RESULT;
- (void)stop;
- (void)reset;
- (void)sendMessageWithText:(NSString * _Nonnull)text data:(NSString * _Nullable)data customType:(NSString * _Nullable)customType;
- (void)sendWhispherWithReceiver:(NSString * _Nonnull)receiver text:(NSString * _Nonnull)text data:(NSString * _Nullable)data customType:(NSString * _Nullable)customType;
- (void)sendCommandWithText:(NSString * _Nonnull)text data:(NSString * _Nullable)data customType:(NSString * _Nullable)customType;
- (void)switchCamera;
- (void)setBackgroundWithBackgroundImage:(UIImage * _Nullable)backgroundImage scale:(CGFloat)scale;
- (void)setBackgroundWithAsset:(AVAsset * _Nullable)asset;
- (BOOL)playGifWithNamed:(NSString * _Nonnull)named error:(NSError * _Nullable * _Nullable)error completion:(void (^ _Nullable)(void))completion;
- (void)setPointOfInterestWithFocus:(CGPoint)focus;
- (void)setPointOfInterestWithExposure:(CGPoint)exposure;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





SWIFT_CLASS("_TtC11FlipFlopSDK20FFStreamerImplConfig")
@interface FFStreamerImplConfig : NSObject
@property (nonatomic) enum CameraPreset preset;
@property (nonatomic, copy) NSString * _Nonnull videoProfile;
@property (nonatomic) NSInteger videoBitrate;
@property (nonatomic) NSInteger keyFrameInterval;
@property (nonatomic) NSInteger fps;
@property (nonatomic) NSInteger sampleRate;
@property (nonatomic) NSInteger audioBitrate;
@property (nonatomic) AVCaptureDevicePosition cameraPos;
@property (nonatomic, copy) NSString * _Nonnull visibility;
@property (nonatomic) AVLayerVideoGravity _Nonnull videoGravity;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC11FlipFlopSDK10FFVideoEnd")
@interface FFVideoEnd : NSObject
@property (nonatomic, readonly) uint64_t like_count;
@property (nonatomic, readonly) uint64_t total_message_count;
@property (nonatomic, readonly) uint64_t total_watcher_count;
@property (nonatomic, readonly) uint64_t duration;
@property (nonatomic, readonly) uint64_t created_at;
@property (nonatomic, readonly, copy) NSString * _Nonnull vod_url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSData;

SWIFT_CLASS("_TtC11FlipFlopSDK12FlipFlopImpl")
@interface FlipFlopImpl : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AppKey;)
+ (NSString * _Nonnull)AppKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AppSecret;)
+ (NSString * _Nonnull)AppSecret SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull userID;
@property (nonatomic, readonly, copy) NSString * _Nonnull userName;
@property (nonatomic, readonly, copy) NSString * _Nonnull avatarProfileURL;
+ (void)initializeWithAppKey:(NSString * _Nonnull)appKey appSecret:(NSString * _Nonnull)appSecret;
+ (void)uninitialize;
+ (void)debugWithLevel:(NSInteger)level;
+ (void)authenticationWithUserID:(NSString * _Nonnull)userID userName:(NSString * _Nonnull)userName avatarProfileURL:(NSString * _Nonnull)avatarProfileURL onSuccess:(void (^ _Nullable)(FlipFlopImpl * _Nonnull))onSuccess onFailure:(void (^ _Nullable)(FFError * _Nonnull))onFailure;
- (void)updateUserInfoWithUserName:(NSString * _Nullable)userName avatarProfileURL:(NSString * _Nullable)avatarProfileURL onSuccess:(void (^ _Nullable)(void))onSuccess onFailure:(void (^ _Nullable)(FFError * _Nonnull))onFailure;
- (FFConference * _Nonnull)getConferenceWithRoom:(NSString * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
- (void)createVideoWithTitle:(NSString * _Nullable)title content:(NSString * _Nullable)content visibility:(NSString * _Nullable)visibility thumbnail_url:(NSString * _Nullable)thumbnail_url data:(NSString * _Nullable)data data2:(NSString * _Nullable)data2 source_type:(NSInteger)source_type onSuccess:(void (^ _Nullable)(FFVideoInfo * _Nonnull))onSuccess onFailure:(void (^ _Nullable)(FFError * _Nonnull))onFailure;
- (void)endVideoWithVideokey:(NSString * _Nonnull)videokey keepLive:(BOOL)keepLive onSuccess:(void (^ _Nullable)(FFVideoEnd * _Nonnull))onSuccess onFailure:(void (^ _Nullable)(FFError * _Nonnull))onFailure;
- (void)getVideoWithVideokey:(NSString * _Nonnull)videokey onSuccess:(void (^ _Nullable)(FFVideoInfo * _Nonnull))onSuccess onFailure:(void (^ _Nullable)(FFError * _Nonnull))onFailure;
- (void)editVideoWithVideoKey:(NSString * _Nonnull)videoKey title:(NSString * _Nullable)title content:(NSString * _Nullable)content visibility:(NSString * _Nullable)visibility thumbnail_url:(NSString * _Nullable)thumbnail_url data:(NSString * _Nullable)data data2:(NSString * _Nullable)data2 onSuccess:(void (^ _Nullable)(FFVideoInfo * _Nonnull))onSuccess onFailure:(void (^ _Nullable)(FFError * _Nonnull))onFailure;
- (void)deleteVideoWithVideoKey:(NSString * _Nonnull)videoKey onSuccess:(void (^ _Nullable)(void))onSuccess onFailure:(void (^ _Nullable)(FFError * _Nonnull))onFailure;
- (void)getMyLivesOnSuccess:(void (^ _Nullable)(FFMyLives * _Nullable))onSuccess onFailure:(void (^ _Nullable)(FFError * _Nonnull))onFailure;
- (void)updateVideoSourceWithKey:(NSString * _Nonnull)key source_type:(NSInteger)source_type onSuccess:(void (^ _Nullable)(FFVideoInfo * _Nullable))onSuccess onFailure:(void (^ _Nullable)(FFError * _Nonnull))onFailure;
- (void)uploadVideoThumbnailWithVideokey:(NSString * _Nonnull)videokey image:(UIImage * _Nonnull)image jpegQuality:(CGFloat)jpegQuality onSuccess:(void (^ _Nullable)(NSString * _Nonnull))onSuccess onFailure:(void (^ _Nullable)(FFError * _Nonnull))onFailure;
- (void)uploadVideoThumbnailWithVideokey:(NSString * _Nonnull)videokey data:(NSData * _Nonnull)data onSuccess:(void (^ _Nullable)(NSString * _Nonnull))onSuccess onFailure:(void (^ _Nullable)(FFError * _Nonnull))onFailure;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSCoder;
@class EAGLContext;

/// A view that displays a video content of a NetStream object which uses OpenGL api. This class is deprecated. Please consider to use the MTHKView.
SWIFT_CLASS("_TtC11FlipFlopSDK8GLHKView")
@interface GLHKView : GLKView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame context:(EAGLContext * _Nonnull)context SWIFT_UNAVAILABLE;
@end


@interface GLHKView (SWIFT_EXTENSION(FlipFlopSDK)) <GLKViewDelegate>
- (void)glkView:(GLKView * _Nonnull)view drawInRect:(CGRect)rect;
@end


SWIFT_CLASS("_TtC11FlipFlopSDK9GifFilter")
@interface GifFilter : VideoEffect
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

SWIFT_PROTOCOL("_TtP11FlipFlopSDK17SwiftyGifDelegate_")
@protocol SwiftyGifDelegate
@optional
- (void)gifDidStartWithSender:(UIImage * _Nonnull)sender;
- (void)gifDidLoopWithSender:(UIImage * _Nonnull)sender;
- (void)gifDidStopWithSender:(UIImage * _Nonnull)sender;
- (void)gifURLDidFinishWithSender:(UIImage * _Nonnull)sender;
- (void)gifURLDidFailWithSender:(UIImage * _Nonnull)sender url:(NSURL * _Nonnull)url error:(NSError * _Nullable)error;
@end


@interface GifFilter (SWIFT_EXTENSION(FlipFlopSDK)) <SwiftyGifDelegate>
- (void)gifDidStopWithSender:(UIImage * _Nonnull)sender;
@end

@class AVCaptureVideoPreviewLayer;

SWIFT_CLASS("_TtC11FlipFlopSDK6HKView")
@interface HKView : UIView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) AVCaptureVideoPreviewLayer * _Nonnull layer;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
@end



SWIFT_CLASS("_TtC11FlipFlopSDK9HLSPlayer")
@interface HLSPlayer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface HLSPlayer (SWIFT_EXTENSION(FlipFlopSDK)) <AVPictureInPictureControllerDelegate>
@end


@interface HLSPlayer (SWIFT_EXTENSION(FlipFlopSDK))
/// a new error log entry has been added
- (void)newErrorLogEntry:(NSNotification * _Nonnull)notification;
/// item has failed to play to its end time
- (void)failedToPlayToEndTime:(NSNotification * _Nonnull)notification;
/// playback completed event
- (void)playerDidFinishPlaying:(NSNotification * _Nonnull)notification;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


SWIFT_CLASS("_TtC11FlipFlopSDK21HighPassSkinSmoothing")
@interface HighPassSkinSmoothing : VideoEffect
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC11FlipFlopSDK14IngestorPlugin")
@interface IngestorPlugin : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol MTLDevice;

/// A view that displays a video content of a NetStream object which uses Metal api.
SWIFT_CLASS("_TtC11FlipFlopSDK8MTHKView")
@interface MTHKView : MTKView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frameRect device:(id <MTLDevice> _Nullable)device SWIFT_UNAVAILABLE;
@end


@interface MTHKView (SWIFT_EXTENSION(FlipFlopSDK)) <MTKViewDelegate>
- (void)mtkView:(MTKView * _Nonnull)view drawableSizeWillChange:(CGSize)size;
- (void)drawInMTKView:(MTKView * _Nonnull)view;
@end


SWIFT_CLASS("_TtC11FlipFlopSDK5Movie")
@interface Movie : VideoEffect
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The NetSocket class creates a two-way connection  between a client and a server. This class is wrapper for a InputStream and an OutputStream.
SWIFT_CLASS("_TtC11FlipFlopSDK9NetSocket")
@interface NetSocket : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The NetClient class creates a two-way connection  between a NetService.
SWIFT_CLASS("_TtC11FlipFlopSDK9NetClient")
@interface NetClient : NetSocket
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP11FlipFlopSDK17NetClientDelegate_")
@protocol NetClientDelegate
@optional
- (void)clientWithInputBuffer:(NetClient * _Nonnull)client;
- (void)clientWithDidAccepetConnection:(NetClient * _Nonnull)client;
@required
- (void)clientWithClient:(NetClient * _Nonnull)client isDisconnected:(BOOL)isDisconnected;
@end


SWIFT_CLASS("_TtC11FlipFlopSDK10NetService")
@interface NetService : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNetService;
@class NSInputStream;
@class NSOutputStream;

@interface NetService (SWIFT_EXTENSION(FlipFlopSDK)) <NSNetServiceDelegate>
- (void)netService:(NSNetService * _Nonnull)sender didAcceptConnectionWithInputStream:(NSInputStream * _Nonnull)inputStream outputStream:(NSOutputStream * _Nonnull)outputStream;
@end


@interface NetService (SWIFT_EXTENSION(FlipFlopSDK)) <NetClientDelegate>
- (void)clientWithClient:(NetClient * _Nonnull)client isDisconnected:(BOOL)isDisconnected;
@end




@class NSStream;

@interface NetSocket (SWIFT_EXTENSION(FlipFlopSDK)) <NSStreamDelegate>
- (void)stream:(NSStream * _Nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
@end


/// The <code>NetStream</code> class is the foundation of a RTMPStream, HTTPStream.
SWIFT_CLASS("_TtC11FlipFlopSDK9NetStream")
@interface NetStream : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC11FlipFlopSDK3PIP")
@interface PIP : VideoEffect
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11FlipFlopSDK12PLAudioMixer")
@interface PLAudioMixer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11FlipFlopSDK10RTMPSocket")
@interface RTMPSocket : NetSocket
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// flash.net.NetStream for Swift
SWIFT_CLASS("_TtC11FlipFlopSDK10RTMPStream")
@interface RTMPStream : NetStream
/// The number of frames per second being displayed.
@property (nonatomic, readonly) uint16_t currentFPS;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






SWIFT_CLASS("_TtC11FlipFlopSDK12RTMPStreamer")
@interface RTMPStreamer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, Anchor, closed) {
  AnchorRight = 0,
};




SWIFT_CLASS("_TtC11FlipFlopSDK11RTMPTSocket")
@interface RTMPTSocket : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLSession;
@class NSURLSessionTask;

@interface RTMPTSocket (SWIFT_EXTENSION(FlipFlopSDK)) <NSURLSessionTaskDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didSendBodyData:(int64_t)bytesSent totalBytesSent:(int64_t)totalBytesSent totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend;
@end

@class CADisplayLink;

SWIFT_CLASS("_TtC11FlipFlopSDK20ScreenCaptureSession")
@interface ScreenCaptureSession : NSObject
- (void)onScreen:(CADisplayLink * _Nonnull)displayLink;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11FlipFlopSDK9SepiaTone")
@interface SepiaTone : VideoEffect
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11FlipFlopSDK18SourceOverComposit")
@interface SourceOverComposit : VideoEffect
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SRWebSocket;
@protocol StompClientLibDelegate;
@class NSURLRequest;

SWIFT_CLASS("_TtC11FlipFlopSDK14StompClientLib")
@interface StompClientLib : NSObject <SRWebSocketDelegate>
@property (nonatomic, strong) SRWebSocket * _Nullable socket;
@property (nonatomic, copy) NSString * _Nullable sessionId;
@property (nonatomic, weak) id <StompClientLibDelegate> _Nullable delegate;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable connectionHeaders;
@property (nonatomic) BOOL connection;
@property (nonatomic) BOOL certificateCheckEnabled;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) double defaultHeartBitTime;)
+ (double)defaultHeartBitTime SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultHeartBitTime:(double)value;
- (void)sendPing;
- (void)sendJSONForDictWithDict:(id _Nonnull)dict toDestination:(NSString * _Nonnull)destination;
- (void)openSocketWithURLRequestWithRequest:(NSURLRequest * _Nonnull)request delegate:(id <StompClientLibDelegate> _Nonnull)delegate connectionHeaders:(NSDictionary<NSString *, NSString *> * _Nullable)connectionHeaders;
- (void)webSocket:(SRWebSocket * _Null_unspecified)webSocket didReceiveMessage:(id _Null_unspecified)message;
- (void)webSocketDidOpen:(SRWebSocket * _Null_unspecified)webSocket;
- (void)webSocket:(SRWebSocket * _Null_unspecified)webSocket didFailWithError:(NSError * _Null_unspecified)error;
- (void)webSocket:(SRWebSocket * _Null_unspecified)webSocket didCloseWithCode:(NSInteger)code reason:(NSString * _Null_unspecified)reason wasClean:(BOOL)wasClean;
- (void)webSocket:(SRWebSocket * _Null_unspecified)webSocket didReceivePong:(NSData * _Null_unspecified)pongPayload;
- (void)sendMessageWithMessage:(NSString * _Nonnull)message toDestination:(NSString * _Nonnull)destination withHeaders:(NSDictionary<NSString *, NSString *> * _Nullable)headers withReceipt:(NSString * _Nullable)receipt;
- (BOOL)isConnected SWIFT_WARN_UNUSED_RESULT;
- (void)subscribeWithDestination:(NSString * _Nonnull)destination;
- (void)subscribeWithHeaderWithDestination:(NSString * _Nonnull)destination withHeader:(NSDictionary<NSString *, NSString *> * _Nonnull)header;
- (void)unsubscribeWithDestination:(NSString * _Nonnull)destination;
- (void)beginWithTransactionId:(NSString * _Nonnull)transactionId;
- (void)commitWithTransactionId:(NSString * _Nonnull)transactionId;
- (void)abortWithTransactionId:(NSString * _Nonnull)transactionId;
- (void)ackWithMessageId:(NSString * _Nonnull)messageId;
- (void)ackWithMessageId:(NSString * _Nonnull)messageId withSubscription:(NSString * _Nonnull)subscription;
- (void)disconnect;
- (void)reconnectWithRequest:(NSURLRequest * _Nonnull)request delegate:(id <StompClientLibDelegate> _Nonnull)delegate connectionHeaders:(NSDictionary<NSString *, NSString *> * _Nonnull)connectionHeaders time:(double)time exponentialBackoff:(BOOL)exponentialBackoff;
- (void)stopReconnect;
- (void)autoDisconnectWithTime:(double)time;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP11FlipFlopSDK22StompClientLibDelegate_")
@protocol StompClientLibDelegate
- (void)stompClientWithClient:(StompClientLib * _Null_unspecified)client didReceiveMessageWithJSONBody:(id _Nullable)jsonBody akaStringBody:(NSString * _Nullable)stringBody withHeader:(NSDictionary<NSString *, NSString *> * _Nullable)header withDestination:(NSString * _Nonnull)destination;
- (void)stompClientDidDisconnectWithClient:(StompClientLib * _Null_unspecified)client;
- (void)stompClientDidConnectWithClient:(StompClientLib * _Null_unspecified)client;
- (void)serverDidSendReceiptWithClient:(StompClientLib * _Null_unspecified)client withReceiptId:(NSString * _Nonnull)receiptId;
- (void)serverDidSendErrorWithClient:(StompClientLib * _Null_unspecified)client withErrorMessage:(NSString * _Nonnull)description detailedErrorMessage:(NSString * _Nullable)message;
- (void)serverDidSendPing;
@end

typedef SWIFT_ENUM(NSInteger, StreamingProtocol, closed) {
  StreamingProtocolRtmp = 0,
  StreamingProtocolWebrtc = 1,
};











SWIFT_CLASS("_TtC11FlipFlopSDK16VideoIOComponent")
@interface VideoIOComponent : IOComponent
@end




@interface VideoIOComponent (SWIFT_EXTENSION(FlipFlopSDK)) <AVCaptureVideoDataOutputSampleBufferDelegate>
- (void)captureOutput:(AVCaptureOutput * _Nonnull)captureOutput didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
@end








SWIFT_CLASS("_TtC11FlipFlopSDK15VideoRoomPlugin")
@interface VideoRoomPlugin : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC11FlipFlopSDK16WebRTCConference")
@interface WebRTCConference : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11FlipFlopSDK12WebRTCPlayer")
@interface WebRTCPlayer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11FlipFlopSDK14WebRTCStreamer")
@interface WebRTCStreamer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC11FlipFlopSDK11WebRTCStuff")
@interface WebRTCStuff : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class RTCDataChannel;
@class RTCDataBuffer;

@interface WebRTCStuff (SWIFT_EXTENSION(FlipFlopSDK)) <RTCDataChannelDelegate>
- (void)dataChannelDidChangeState:(RTCDataChannel * _Nonnull)dataChannel;
- (void)dataChannel:(RTCDataChannel * _Nonnull)dataChannel didReceiveMessageWithBuffer:(RTCDataBuffer * _Nonnull)buffer;
@end

@class RTCPeerConnection;
@class RTCRtpTransceiver;
@class RTCMediaStream;
@class RTCIceCandidate;

@interface WebRTCStuff (SWIFT_EXTENSION(FlipFlopSDK)) <RTCPeerConnectionDelegate>
- (void)peerConnection:(RTCPeerConnection * _Nonnull)peerConnection didStartReceivingOnTransceiver:(RTCRtpTransceiver * _Nonnull)transceiver;
- (void)peerConnection:(RTCPeerConnection * _Nonnull)peerConnection didChangeSignalingState:(RTCSignalingState)stateChanged;
- (void)peerConnection:(RTCPeerConnection * _Nonnull)peerConnection didAddStream:(RTCMediaStream * _Nonnull)stream;
- (void)peerConnection:(RTCPeerConnection * _Nonnull)peerConnection didRemoveStream:(RTCMediaStream * _Nonnull)stream;
- (void)peerConnectionShouldNegotiate:(RTCPeerConnection * _Nonnull)peerConnection;
- (void)peerConnection:(RTCPeerConnection * _Nonnull)peerConnection didChangeIceConnectionState:(RTCIceConnectionState)newState;
- (void)peerConnection:(RTCPeerConnection * _Nonnull)peerConnection didChangeIceGatheringState:(RTCIceGatheringState)newState;
- (void)peerConnection:(RTCPeerConnection * _Nonnull)peerConnection didGenerateIceCandidate:(RTCIceCandidate * _Nonnull)candidate;
- (void)peerConnection:(RTCPeerConnection * _Nonnull)peerConnection didRemoveIceCandidates:(NSArray<RTCIceCandidate *> * _Nonnull)candidates;
- (void)peerConnection:(RTCPeerConnection * _Nonnull)peerConnection didOpenDataChannel:(RTCDataChannel * _Nonnull)dataChannel;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
